// portfolio-container-adaptorspriority-queue.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <queue>

class Person {
    friend std::ostream& operator << (const Person& p, std::ostream& os);
    std::string name;
    int age{};
public:
    Person() = default;
    Person(std::string name = "unknown", int age = 0) : name{name}, age{age} {}
    ~Person() = default;
    bool operator<(const Person& p) const { return this->age < p.age; }
    bool operator=(const Person& p) const { return this->name == p.name && this->age == p.age; }
};

std::ostream& operator << (const Person& p, std::ostream& os) {
    os << p.name << " " << p.age << std::endl;
    return os;
}

template <typename T>
void display(std::priority_queue<T> pq) {
    std::cout << "[";
    while(!pq.emplty()) {
        T elem = pq.top();
        pq.pop();
        std::cout << elem << " ";
    }
    std::cout << "]" << std::endl;
}

void test1() {
    std::cout << "\nTest1 ===========================" << std::endl;
    std::priority_queue<int> pq;
    for (int i : {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
        pq.push(i);
    std::priority_queue<std::string> pq1;
    std::vector<std::string> vec1{ "Jenny", "Gabriel", "Elizabth", "Jennifer", "Jen" };
    for (auto i : vec1) {
        pq1.push(i);
    }
    display(pq);
    display(pq1);
}

void test2() {
    std::cout << "\nTest2============================" << std::endl;
    std::priority_queue<Person> pq;
    pq.push(Person{ "Jenny", 19 });
    pq.push(Person{ "Elizabeth", 17 });
    pq.push(Person{ "Gabriel",21 });
    std::priority_queue<Person> pq1;
    std::vector<Person> vec1{
        {"Jenny", 33},
        {"Elizabeth", 34},
        {"Gabriel", 35}
    };
    for (auto i : vec1) {
        pq1.push(i);
    }
    display(pq);
    display(pq1);
}

int main()
{
    tets1();
    tets2();
    return 0;
}
